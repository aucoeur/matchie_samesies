{"version":3,"sources":["actions/index.js","data.js","reducers/gameReducer.js","reducers/index.js","components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["flipCard","index","type","payload","randomColors","randomColor","count","luminosity","images","backSide","hue","randomCards","map","color","i","image","isFront","backColor","matched","secondCards","JSON","parse","stringify","cardPairs","initState","cards","shuffle","selectedCard","selectedFirst","gameReducer","state","action","shuffledCards","cardSet","console","log","combineReducers","game","connect","props","front","backgroundColor","backgroundImage","process","back","id","onClick","className","style","card","key","App","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.514ec843.chunk.js","sourcesContent":["// Action Types\n\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const FLIP_CARD = 'FLIP_CARD';\n\n// Action Creators\n\nexport function shuffleCards(cards) {\n    return { \n        type: SHUFFLE_CARDS,\n        payload: { cards }\n     };\n};\n\nexport function flipCard(index) {\n    return { \n        type: FLIP_CARD,\n        payload: { index }\n    };\n};\n\nexport function flipCardTimeout(index) {\n    return function (dispatch) {\n        setTimeout(() => {\n            dispatch(flipCard(index))\n        }, 1000)\n    }\n}","import randomColor from 'randomcolor';\nimport shuffle from 'shuffle-array';\n\nconst randomColors = randomColor({\n    count: 8,\n    luminosity: 'bright',\n    // format: 'rgb' // e.g. 'rgb(225,200,20)'\n    });\n\n\nconst images = [\n    \"daisy_mae.png\",\n    \"derwin.png\",\n    \"flora.png\",\n    \"gaston.png\",\n    \"hans.png\",\n    \"leif.png\",\n    \"pascal.png\",\n    \"truffles.png\"\n]\nconst backSide = randomColor(\n    {luminosity: 'dark', hue: 'blue'});\n\nconst randomCards = randomColors.map((color, i) => {\n    return {\n        color, \n        image: images[i],\n        isFront: false,\n        backColor: backSide,\n        matched: false\n    }\n})\n\n//  garbage way to deep copy\nconst secondCards = JSON.parse(JSON.stringify(randomCards))\n\nconst cardPairs = [...randomCards, ...secondCards]\n\nexport default shuffle(cardPairs);","import { SHUFFLE_CARDS, FLIP_CARD } from '../actions'; //\nimport shuffle from 'shuffle-array';\nimport cardPairs from '../data';\n\n// import { store } from '../index';\n// import { useDispatch } from 'react-redux';\n\nconst initState = {\n    cards: cardPairs,\n    selectedCard: null,\n    selectedFirst: null,\n}\n\n// \n\nconst gameReducer = (state = initState, action) => {\n    // const dispatch = useDispatch\n    switch (action.type) {\n        case SHUFFLE_CARDS:\n            const cardPairs = state.cards\n            const shuffledCards = shuffle(cardPairs)\n            return { ...state, cards: shuffledCards }\n\n        case FLIP_CARD:\n            const cardSet = [...state.cards]\n            \n            // flip card action\n            cardSet[action.payload.index].isFront = !cardSet[action.payload.index].isFront\n\n            let selectedCard = { ...state.selectedCard }\n            let selectedFirst = { ...state.selectedFirst }\n\n            selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n\n            // if (!(state.selectedFirst)) {\n            //     console.log(state.selectedFirst)\n            // }\n\n            // if selectedFirst is null\n            if (selectedCard && !state.selectedFirst) {\n                // flip card action\n                // cardSet[action.payload.index].isFront = !cardSet[action.payload.index].isFront\n                selectedFirst = selectedCard\n                console.log(`First ${selectedFirst.image}`)\n\n            // if selectedFirst not null\n            } else if (selectedCard && state.selectedFirst) {\n                // if selectedCard not the exact card as selectedFirst\n                if (selectedCard.index !== selectedFirst.index) {\n                    // if current selected and first don't match\n                    if (selectedCard.image !== state.selectedFirst.image) {\n                        cardSet[state.selectedFirst.index].isFront = false\n                        // selectedFirst = selectedCard\n                        cardSet[selectedCard.index].isFront = false\n                        console.log(selectedFirst.image, selectedCard.image)\n                        console.log(`Second ${selectedCard.image} - No match`)\n                        return { ...state, cards: cardSet, selectedCard:null, selectedFirst: null}\n                    } else {\n                        console.log(selectedFirst.image, selectedCard.image)\n                        console.log('MATCH')\n                        cardSet[selectedFirst.index].matched = true\n                        cardSet[selectedCard.index].matched = true \n                        return { ...state, cards: cardSet, selectedCard: null, selectedFirst: null}\n                    }\n                } else {\n                    console.log('SAME CARD')\n                }\n            }\n\n            return { ...state, cards: cardSet, selectedCard: selectedCard, selectedFirst: selectedFirst}\n\n\n        // case FLIP_CARD:\n        //     const cardSet = [...state.cards]\n\n        //     // flips the card on click\n        //     cardSet[action.payload.index].isFront = !cardSet[action.payload.index].isFront\n            \n        //     let selectedCard = { ...state.selectedCard }\n\n        //     if (state.selectedCard != null) {\n        //         if (selectedCard.image != cardSet[action.payload.index].image) {\n        //             // more gross\n        //             cardSet[selectedCard.index].isFront = false\n        //             cardSet[action.payload.index].isFront = false \n\n        //             // selectedCard = null\n        //             selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n        //         } else {\n        //             cardSet[selectedCard.index].matched = true\n        //             cardSet[action.payload.index].matched = true \n        //             // selectedCard = null\n        //             selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n        //         }\n        //     } else {\n        //         selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n        //     }\n\n        //     return { ...state, cards: cardSet, selectedCard } //, selectedFirst, selectedSecond }\n\n        default:\n            return state\n    }\n} \n\nexport default gameReducer;","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n    game: gameReducer\n})","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { flipCard } from '../actions'\n\nimport './Card.css';\n\nfunction Card(props) {\n    const { i, flipCard, cards } = props\n    const { color, image, isFront, backColor, matched } = cards[i]\n\n    // console.log(cards[i])\n\n    const front = {\n        backgroundColor: `${color}`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/${ image })`\n    }\n\n    const back = {\n        backgroundColor: `${backColor}`, \n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/leaf_mask.png)`\n    }\n\n    return (\n        <div\n            id={i}\n            onClick={ matched ? null : () => {\n                return flipCard(i);\n            } }\n            className=\"card\" \n            style={ isFront ? front : back }> \n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { flipCard }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Card);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport shuffle from 'shuffle-array';\n\nimport Card from './Card';\n\nimport './Board.css';\n\n\nfunction Board(props) {\n    const { cards, selectedCard } = props\n    \n    const cardSet = cards.map((card, i) => {\n        return (\n            <Card \n                i={i}             \n                key={card.image+i}\n            />\n        )\n        \n    })\n\n    // const shuffled = shuffle(cardSet)\n\n    return (\n        <div>\n            <h3>Selected Card: { selectedCard ? selectedCard.image : ''}</h3>\n            <div className=\"board\">\n                {cardSet}\n                {/* {shuffled} */}\n            </div>\n        </div>\n    )\n        \n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards,\n      selectedCard: state.game.selectedCard\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        // put shuffle \n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Board);","import React from 'react';\nimport Board from './components/Board'\n\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <div className=\"Main\">\n          <h1 className='margin'>Matchie Samesie</h1>\n          <Board />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport gameReducer from './reducers';\n\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(gameReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}