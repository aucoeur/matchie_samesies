{"version":3,"sources":["actions/index.js","data.js","reducers/gameReducer.js","reducers/index.js","components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["shuffleCards","cards","type","payload","flipCard","index","unflipCard","generateCards","randomColors","randomColor","count","luminosity","images","backSide","hue","randomCards","map","color","i","image","isFront","backColor","matched","secondCards","JSON","parse","stringify","cardPairs","shuffle","initState","selectedCard","selectedFirst","gameReducer","state","action","console","log","cards1","cardSet","card","setTimeout","store","dispatch","combineReducers","game","connect","props","front","backgroundColor","backgroundImage","process","back","id","onClick","className","style","key","value","App","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4207a694.chunk.js","sourcesContent":["// Action Types\n\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const FLIP_CARD = 'FLIP_CARD';\nexport const UNFLIP = 'UNFLIP';\n\n// Action Creators\n\nexport function shuffleCards(cards) {\n    return { \n        type: SHUFFLE_CARDS,\n        payload: { cards }\n     };\n};\n\nexport function flipCard(index) {\n    return { \n        type: FLIP_CARD,\n        payload: { index }\n    };\n};\n\nexport function unflipCard(index) {\n    return {\n        type: UNFLIP,\n        payload: { index }\n    }\n}\n\n// export function flipCardTimeout(index) {\n//     return function (dispatch) {\n//         setTimeout(() => {\n//             dispatch(flipCard(index))\n//         }, 1000)\n//     }\n// }","import randomColor from 'randomcolor';\nimport shuffle from 'shuffle-array';\n\nfunction generateCards() {\n    const randomColors = randomColor({\n        count: 8,\n        luminosity: 'bright',\n        // format: 'rgb' // e.g. 'rgb(225,200,20)'\n        });\n\n\n    const images = [\n        \"daisy_mae.png\",\n        \"derwin.png\",\n        \"flora.png\",\n        \"gaston.png\",\n        \"hans.png\",\n        \"leif.png\",\n        \"pascal.png\",\n        \"truffles.png\"\n    ]\n    const backSide = randomColor(\n        {luminosity: 'dark', hue: 'blue'});\n\n    const randomCards = randomColors.map((color, i) => {\n        return {\n            color, \n            image: images[i],\n            isFront: false,\n            backColor: backSide,\n            matched: false\n        }\n    })\n\n    //  garbage way to deep copy\n    const secondCards = JSON.parse(JSON.stringify(randomCards))\n\n    const cardPairs = [...randomCards, ...secondCards]\n\n\n    return shuffle(cardPairs)\n}\n\n// export default shuffle(cardPairs);\n// export default cardPairs\nexport default generateCards;","import { SHUFFLE_CARDS, FLIP_CARD, UNFLIP, shuffleCards, unflipCard } from '../actions'; //\nimport shuffle from 'shuffle-array';\n// import cardPairs from '../data';\nimport generateCards from '../data';\n\nimport { store } from '../index';\n\n// let cardPairs =;\n\nconst initState = {\n    cards:  generateCards(),\n    selectedCard: null,\n    selectedFirst: null,\n}\n\nconst gameReducer = (state = initState, action) => {\n    switch (action.type) {\n        case SHUFFLE_CARDS:\n            let cards = [ ...state.cards ]\n            console.log('shuffle')\n            cards = generateCards()\n            return { ...state, cards: cards , selectedCard: null, selectedFirst: null }\n\n\n        case UNFLIP:\n            // unflips card at index\n            console.log('unflip')\n            const cards1 = [ ...state.cards ]\n            \n            cards1[action.payload.index].isFront = false\n\n            return { ...state, cards: cards1, selectedFirst: null, selectedCard: null }\n\n        case FLIP_CARD:\n            console.log(FLIP_CARD)\n            const index = action.payload.index\n            const cardSet = [...state.cards]\n            \n            // flip card action\n            cardSet[index].isFront = !cardSet[index].isFront\n            \n            // if the index = first selected\n            if (state.selectedFirst == null) {\n                return { ...state, cards: cardSet, selectedFirst: index }\n            } else if ( state.selectedFirst === index ) {\n                return state\n            } else {\n                if (state.cards[index].image === state.cards[state.selectedFirst].image) {\n                    // cards match!\n                    console.log(`match! ${state.cards[state.selectedFirst].image}`)\n\n                    return { ...state, selectedFirst: null, \n                        cards: state.cards.map((card) => {\n                            if (card.image === state.cards[state.selectedFirst].image) {\n                                return { ...card, matched: true, isFront: true }\n                            }\n                            return card\n                    }) }\n                } else {\n                    // No match :(\n                    // cardSet[index].isFront = !cardSet[index].isFront\n                    setTimeout(() => {\n                        console.log('No match')\n                        store.dispatch(unflipCard(index))\n                        store.dispatch(unflipCard(state.selectedFirst))\n                        // return { ...state, selectedFirst: null, selectedCard: null, cards: state.cards.map((card) => {\n                        //     if (!card.matched) {\n                        //         return { ...card, isFront: false }\n                        //     }\n                        // })}\n                    }, 500)\n                    return { ...state, cards: cardSet, selectedFirst: null, selectedCard: null }\n                }\n            }\n        // case FLIP_CARD:\n\n        //     const cardSet = [...state.cards]\n            \n        //     // flip card action\n        //     cardSet[action.payload.index].isFront = !cardSet[action.payload.index].isFront\n\n        //     let selectedCard = { ...state.selectedCard }\n        //     let selectedFirst = { ...state.selectedFirst }\n\n        //     selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n\n        //     console.log(selectedCard, state.selectedFirst)\n        //     // if selectedFirst is null\n        //     if (!state.selectedFirst) {\n        //         selectedFirst = selectedCard\n        //         console.log(`First ${selectedFirst.image}`)\n\n        //     // if selectedFirst not null\n        //     } else if (state.selectedFirst) {\n        //         if (selectedCard.index == selectedFirst.index) {\n        //             console.log('SAME CARD')\n        //             return state\n        //         }\n\n        //         // // if selectedCard not the exact card as selectedFirst\n        //         // if (selectedCard.index !== selectedFirst.index) {\n        //         //     // if current selected and first don't match\n        //         //     if (selectedCard.image !== state.selectedFirst.image) {\n        //         //         cardSet[state.selectedFirst.index].isFront = false\n        //         //         cardSet[selectedCard.index].isFront = false\n\n        //         //         console.log(selectedFirst.image, selectedCard.image)\n        //         //         console.log(`Second ${selectedCard.image} - No match`)\n                        \n        //         //         return { ...state, cards: cardSet, selectedCard:null, selectedFirst: null}\n        //         //     } else {\n        //         //         console.log(selectedFirst.image, selectedCard.image)\n        //         //         console.log('MATCH')\n\n        //         //         cardSet[selectedFirst.index].matched = true\n        //         //         cardSet[selectedCard.index].matched = true \n\n        //         //         return { ...state, cards: cardSet, selectedCard: null, selectedFirst: null}\n        //         //     }\n        //         // } else {\n        //         //     console.log('SAME CARD')\n        //         // }\n        //     }\n\n            // return { ...state, cards: cardSet, selectedCard: selectedCard, selectedFirst: selectedFirst}\n\n        default:\n            return state\n    }\n} \n\nexport default gameReducer;","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n    game: gameReducer\n})","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { flipCard } from '../actions'\n\nimport './Card.css';\n\nfunction Card(props) {\n    const { i, flipCard, cards } = props\n    const { color, image, isFront, backColor, matched } = cards[i]\n\n    // console.log(cards[i])\n\n    const front = {\n        backgroundColor: `${color}`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/${ image })`\n    }\n\n    const back = {\n        backgroundColor: `${backColor}`, \n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/leaf_mask.png)`\n    }\n\n    return (\n        <div\n            id={i}\n            onClick={ matched ? null : () => {\n                return flipCard(i);\n            }}\n            className=\"card\" \n            style={ isFront ? front : back }> \n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { flipCard }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Card);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { shuffleCards } from '../actions'\n\nimport Card from './Card';\n\nimport './Board.css';\n\n\nfunction Board(props) {\n    const { cards, shuffleCards } = props\n    \n    const cardSet = cards.map((card, i) => {\n        return (\n            <Card \n                i={i}             \n                key={card.image+i}\n            />\n        )\n        \n    })\n\n    // const shuffled = shuffle(cardSet)\n\n    return (\n        <div>\n            <input \n                type=\"button\" \n                className='restart' \n                onClick={() => {\n                    return shuffleCards(cards)\n                    }}\n                value='reset'/>\n            <div className=\"board\">\n                {cardSet}\n                {/* {shuffled} */}\n            </div>\n        </div>\n    )\n        \n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards,\n      selectedCard: state.game.selectedCard\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { shuffleCards }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Board);","import React from 'react';\nimport Board from './components/Board'\n\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <div className=\"Main\">\n          <h1 className='margin'>Matchie Samesie</h1>\n          <Board />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport gameReducer from './reducers';\n\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(gameReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}