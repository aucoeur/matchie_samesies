{"version":3,"sources":["actions/index.js","data.js","reducers/gameReducer.js","reducers/index.js","components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["flipCard","index","check","type","payload","randomColors","randomColor","count","luminosity","images","backSide","hue","randomCards","map","color","i","image","isFront","backColor","matched","secondCards","JSON","parse","stringify","initState","cards","selectedFirst","selectedSecond","selectedCard","gameReducer","state","action","cardPairs","shuffledCards","shuffle","cardSet","combineReducers","game","connect","props","console","log","front","backgroundColor","backgroundImage","process","back","id","onClick","className","style","card","key","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9d93ae8.chunk.js","sourcesContent":["// Action Types\n\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const FLIP_CARD = 'FLIP_CARD';\nexport const SET_CARD_STATE = 'SET_CARD_STATE';\n\n// Other Constants\nexport const CardState = {\n    FACE_UP: 'FACE_UP',\n    FACE_DOWN: 'FACE_DOWN',\n    MATCHED_PAIR: 'MATCHED_PAIR'\n};\n\n// Action Creators\n\nexport function shuffleCards(cards) {\n    return { \n        type: SHUFFLE_CARDS,\n        payload: { cards }\n     };\n};\n\nexport function flipCard(index, check=true) {\n    return { \n        type: FLIP_CARD,\n        payload: { index, check }\n    };\n};\n\nexport function setCardState(status, index) {\n    return {\n        type: SET_CARD_STATE,\n        payload: { status, index }\n    }\n}","import randomColor from 'randomcolor';\n\nconst randomColors = randomColor({\n    count: 8,\n    luminosity: 'bright',\n    // format: 'rgb' // e.g. 'rgb(225,200,20)'\n    });\n\n\nconst images = [\n    \"daisy_mae.png\",\n    \"derwin.png\",\n    \"flora.png\",\n    \"gaston.png\",\n    \"hans.png\",\n    \"leif.png\",\n    \"pascal.png\",\n    \"truffles.png\"\n]\n\nconst backSide = randomColor({luminosity: 'dark', hue: 'blue'});\n\nconst randomCards = randomColors.map((color, i) => {\n    return {\n        color, \n        image: images[i],\n        isFront: false,\n        backColor: backSide,\n        matched: false\n    }\n})\n\n//  garbage way to deep copy\nconst secondCards = JSON.parse(JSON.stringify(randomCards))\n\nconst cardPairs = [...randomCards, ...secondCards]\n\nexport default cardPairs;","import { SHUFFLE_CARDS, FLIP_CARD } from '../actions';\nimport shuffle from 'shuffle-array';\nimport cardPairs from '../data';\n\nconst initState = {\n    cards: cardPairs,\n    selectedFirst: null,\n    selectedSecond: null,\n    selectedCard: null\n}\n\n// \n\nconst gameReducer = (state = initState, action) => {\n    switch (action.type) {\n        case SHUFFLE_CARDS:\n            const cardPairs = state.cards\n            const shuffledCards = shuffle(cardPairs)\n            return { ...state, cards: shuffledCards }\n\n        case FLIP_CARD:\n            const cardSet = [...state.cards]\n\n            cardSet[action.payload.index].isFront = !cardSet[action.payload.index].isFront\n            \n            let selectedCard = { ...state.selectedCard }\n\n            if (state.selectedCard) {\n                if (selectedCard.image != cardSet[action.payload.index].image) {\n                    cardSet[selectedCard.index].isFront = false\n                    cardSet[action.payload.index].isFront = false \n\n                    selectedCard = null\n                } else {\n                    cardSet[selectedCard.index].matched = true\n                    cardSet[action.payload.index].matched = true \n                    selectedCard = null\n                }\n            } else {\n                selectedCard = { ...cardSet[action.payload.index], index: action.payload.index }\n            }\n\n\n            return { ...state, cards: cardSet, selectedCard }\n\n        default:\n            return state\n    }\n} \n\nexport default gameReducer;","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n    game: gameReducer\n})","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { flipCard } from '../actions'\n\nimport './Card.css';\n\nfunction Card(props) {\n    const { i, flipCard, cards } = props\n    const { color, image, isFront, backColor, matched } = cards[i]\n\n    console.log(cards[i])\n\n    const front = {\n        backgroundColor: `${color}`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/${ image })`\n    }\n\n    const back = {\n        backgroundColor: `${backColor}`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/leaf_mask.png)`\n    }\n\n    return (\n        <div\n            id={i}\n            onClick={ matched ? '' : () => {\n                return flipCard(i);\n            } }\n            className=\"card\" \n            style={ isFront ? front : back }> \n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { flipCard }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Card);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport shuffle from 'shuffle-array';\n\nimport Card from './Card';\n\nimport './Board.css';\n\n\nfunction Board(props) {\n\n    const cards = props.cards.map((card, i) => {\n        return (\n            <Card \n                i={i}             \n                key={card.image+i}\n            />\n        )\n        \n    })\n\n    // const shuffled = shuffle(cards)\n\n    return (\n        <div className=\"board\">\n            {cards}\n        </div>\n    )\n        \n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        // put shuffle \n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Board);","import React from 'react';\nimport Board from './components/Board'\n\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <div className=\"Main\">\n          <h1 className='margin'>Matchie Samesie</h1>\n          <Board />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport gameReducer from './reducers';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(gameReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}