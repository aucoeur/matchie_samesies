{"version":3,"sources":["actions/index.js","data.js","reducers/gameReducer.js","reducers/index.js","components/Card.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["shuffleCards","cards","type","payload","flipCard","index","unflipCard","generateCards","randomColors","randomColor","count","luminosity","backSide","hue","format","images","cardSet","items","Set","size","Math","floor","random","length","add","generateCardSet","randomCards","map","color","i","image","isFront","backColor","matched","secondCards","JSON","parse","stringify","cardPairs","shuffle","initState","selectedCard","selectedFirst","gameReducer","state","action","theCards","card","setTimeout","store","dispatch","combineReducers","game","connect","props","front","backgroundColor","backgroundImage","process","back","backgroundSize","backgroundPosition","id","onClick","className","style","key","value","App","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8627de32.chunk.js","sourcesContent":["// Action Types\n\nexport const SHUFFLE_CARDS = 'SHUFFLE_CARDS';\nexport const FLIP_CARD = 'FLIP_CARD';\nexport const UNFLIP = 'UNFLIP';\n\n// Action Creators\n\nexport function shuffleCards(cards) {\n    return { \n        type: SHUFFLE_CARDS,\n        payload: { cards }\n     };\n};\n\nexport function flipCard(index) {\n    return { \n        type: FLIP_CARD,\n        payload: { index }\n    };\n};\n\nexport function unflipCard(index) {\n    return {\n        type: UNFLIP,\n        payload: { index }\n    }\n}","import randomColor from 'randomcolor';\nimport shuffle from 'shuffle-array';\n\nfunction generateCards() {\n    const randomColors = randomColor({\n        count: 8,\n        luminosity: 'bright',\n        // format: 'rgb'\n        });\n\n    const backSide = randomColor(\n        {luminosity: 'dark', hue:'blue', format: 'rgb'});\n\n    const images = [\n        \"beardo.png\",\n        \"beau.png\",\n        \"bunnie.png\",\n        \"celeste.png\",\n        \"cesar.png\",\n        \"chester.png\",\n        \"coco.png\",\n        \"croque.png\",\n        \"daisy_mae.png\",\n        \"derwin.png\",\n        \"doc.png\",\n        \"dotty.png\",\n        \"flora.png\",\n        \"gaston.png\",\n        \"hans.png\",\n        \"ketchup.png\",\n        \"kk_slider.png\",\n        \"kyle.png\",\n        \"leif.png\",\n        \"lolly.png\",\n        \"lopez.png\",\n        \"mira.png\",\n        \"pascal.png\",\n        \"punchy.png\",\n        \"roald.png\",\n        \"truffles.png\"\n    ]\n\n    function generateCardSet() {\n        const items = new Set()\n        while (items.size < 8) { \n            let index = Math.floor(Math.random()*images.length)\n            items.add(images[index])\n        }\n        return [...items]\n    }\n\n    const cardSet = generateCardSet()\n\n    const randomCards = randomColors.map((color, i) => {\n        return {\n            color, \n            image: cardSet[i],\n            isFront: false,\n            backColor: backSide,\n            matched: false\n        }\n    })\n\n    //  'garbage' way to deep copy\n    const secondCards = JSON.parse(JSON.stringify(randomCards))\n\n    const cardPairs = [...randomCards, ...secondCards]\n\n\n    return shuffle(cardPairs)\n}\n\nexport default generateCards;","import { SHUFFLE_CARDS, FLIP_CARD, UNFLIP, unflipCard } from '../actions'; //\nimport generateCards from '../data';\n\nimport { store } from '../index';\n\nconst initState = {\n    cards:  generateCards(),\n    selectedCard: null,\n    selectedFirst: null,\n}\n\nconst gameReducer = (state = initState, action) => {\n    switch (action.type) {\n        case SHUFFLE_CARDS:\n            let cards = [ ...state.cards ]\n            cards = generateCards()\n\n            return { ...state, cards: cards , selectedCard: null, selectedFirst: null }\n\n        case UNFLIP:\n            // unflips card at index\n\n            const theCards = [ ...state.cards ]\n            \n            theCards[action.payload.index].isFront = false\n\n            return { ...state, cards: theCards, selectedFirst: null, selectedCard: null }\n\n        case FLIP_CARD:\n\n            const index = action.payload.index\n            const cardSet = [...state.cards]\n            \n            // flip card action\n            cardSet[index].isFront = !cardSet[index].isFront\n            \n            // if selectedCard is first\n            if (state.selectedFirst == null) {\n                return { ...state, cards: cardSet, selectedFirst: index }\n\n            // if selectedCard is exact same as selectedFirst\n            } else if ( state.selectedFirst === index ) {\n                return state\n                \n            // else compare cards\n            } else {\n                // if the two card images are same\n                if (state.cards[index].image === state.cards[state.selectedFirst].image) {\n                    // cards match!\n                    return { ...state, selectedFirst: null, \n                        cards: state.cards.map((card) => {\n                            if (card.image === state.cards[state.selectedFirst].image) {\n                                return { ...card, matched: true, isFront: true }\n                            }\n                            return card\n                        }) \n                    }\n                } else {\n                    // No match :(\n                    setTimeout(() => {\n                        store.dispatch(unflipCard(index))\n                        store.dispatch(unflipCard(state.selectedFirst))\n\n                    }, 400)\n                    return { ...state, cards: cardSet, selectedFirst: null, selectedCard: null }\n                }\n            }\n\n        default:\n            return state\n    }\n} \n\nexport default gameReducer;","import { combineReducers } from 'redux';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n    game: gameReducer\n})","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { flipCard } from '../actions'\n\nimport './Card.css';\n\nfunction Card(props) {\n    const { i, flipCard, cards } = props\n    const { color, image, isFront, backColor, matched } = cards[i]\n\n    const front = {\n        backgroundColor: `${color}`,\n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/${ image })`\n    }\n\n    const back = {\n        backgroundColor: `${backColor}`, \n        backgroundImage: `url(${process.env.PUBLIC_URL}/ac/leaf_aa.png)`,\n        backgroundSize: 'cover',\n        backgroundPosition: '50%'\n    }\n\n    return (\n        <div\n            id={i}\n            onClick={ matched ? null : () => {\n                return flipCard(i);\n            }}\n            className=\"card\" \n            style={ isFront ? front : back }> \n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { flipCard }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Card);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { shuffleCards } from '../actions'\n\nimport Card from './Card';\n\nimport './Board.css';\n\nfunction Board(props) {\n    const { cards, shuffleCards } = props\n    const { backColor } = cards[0]\n    \n    const cardSet = cards.map((card, i) => {\n        return (\n            <Card \n                i={i}             \n                key={card.image+i}\n            />\n        )\n        \n    })\n\n    return (\n        <div>\n            <input \n                type=\"button\" \n                className='restart'\n                style= {\n                    { backgroundColor: `${backColor}` }\n                }\n                onClick={() => {\n                    return shuffleCards(cards)\n                    }}\n                value='reset'/>\n            <div className=\"board\">\n                {cardSet}\n            </div>\n        </div>\n    )\n        \n}\n\nconst mapStateToProps = state => {\n  return ({ \n      cards: state.game.cards,\n      selectedCard: state.game.selectedCard\n   })\n}\n\nconst mapDispatchToProps = () => {\n    return { shuffleCards }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Board);","import React from 'react';\nimport Board from './components/Board'\n\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <div className=\"Main\">\n          <h1 className='margin'>Matchie Samesie</h1>\n          <Board />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport gameReducer from './reducers';\n\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(gameReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}